# 嵌入式程序设计习题（一）

标签（空格分隔）： 简单算法 串行通信

    本次习题主要锻炼同学们的基本编程能力与简单算法（其实并没）的运用。
    
    宁可
    lumist.lnx@gmail.com

[TOC]
##§1 背景
在嵌入式设计过程中常常要求Master（上位机）与Slave（下位机）两端进行通信，在实际使用中一般使用串行通信协议，有时为了方便观测，通过Slave直接传送ASCII字符串至Master，依靠GUI进行数据显示。
> 这里提及的上位机和下位机的概念**并不重要**。

这种方式虽然有降低效率和浪费性能的嫌弃，但是比较直观，且基本不需要在Master端写软件来接收、处理数据（只需要简单的串口调试助手就可以看到效果）。
而且大部分使用这种方式的场合也不会频繁、大量地传送数据，因此这种代价我们是可以接受的。
而且通过这种方式传送的数据一般分为两类。

> 1. 数据型字符串
    * 数值
        \> $140$
        \> $24.12$
        \> $(10001000)_2$
    * 字母、符号
        \> $Hello,world!$
        \> $Holy-high$
        
> 2. 命令型字符串
    根据M/S软件逻辑制订，类型众多，这里不加赘述。
    
###§1.1 ASCII码与取余运算
通过上述数值字符串，我们容易发现，有时候需要对长度不定的 $N$ 进制数的ASCII码传送并显示。
这里给出阿拉伯数字$0-9$的ASCII码。
|数字|ASCII(HEX)|ASCII(DEC)|
|-|----|--|
|0|0x30|48|
|1|0x31|49|
|2|0x32|50|
|3|0x33|51|
|4|0x34|52|
|5|0x35|53|
|6|0x36|54|
|7|0x37|55|
|8|0x38|56|
|9|0x39|57|
还记得吗？二进制数获取某一位的方法是通过逻辑运算以及移动操作完成的。
而对于十进制数，一种可行的方案则是通过取余运算。
> 这里是讲Slave(下位机）的底层实现。
下位机一般是运算性能远逊于PC的微处理器，在不依赖其他现有库的情况下无法使用 Integer.toString() 等方法。

举个栗子，对于$(2929)_{10}$。
首先确定位数为$4$，因此可得下表。
|位（权）|系数|ASCII(HEC)|
|-|----|--|
|千(1000)|$2929/1000=2$|0x32|
|百(100)|$929/100=9$|0x39|
|十(10)|$29/10=2$|0x32|
|个(1)|$9/1=9$|0x39|
容易看出，通过除法和取余运算即可获得各位权上的系数，得到后转换为字符串“2929”。
> **Q1**: 位数是如何确定的？（可以参照数电D/A转换原理）
> **Q2**: 转换为ASCII码后**不经处理**就可以传送了吗？
> 请以 $(14992)_{10}$ 为例根据上述方法表示**传送顺序**（先发什么、后发什么）。

###§1.2 串行通信
上一节大致讲解了关于十进制数转换字符串的原理。这里简要地介绍一下串行通信的概念。
串行通信是使用**很少的几根数据线将数据按位依次传输**的方法，可以传送也可以接收，适合于PC与PC、PC与外设之间的远距离通信。
> 粗体字是**Q2**的trick所在。

本次练习通过Slave单向传送数据给 Master 。
> Slave 是编写的程序， Master 是命令行。
> 通过 SendByte() 函数模拟传送过程。

##2 习题

$$\mathbf{Decimal.toString}$$
$$time\ limit: 1s\ \ \ \ \ \ \ \ mermory\ limit: 16\ MB$$

$\mathrm Problem\ Description$
> zd同学还很年轻的时候，在AVR上写了一个随机亮灯的程序。因为灯很多，运行后有时亮灯数会突破10位数，为了数亮了多少盏灯常常要用很长时间（还可能被闪瞎XD），于是他想把每次程序运行后亮灯数目发送回来显示在电脑上。
由于zd有强迫症，他希望发回来的数字不能有前置0。
而且他当初写程序的时候有个bug，因为懒所以一直没改：程序运行时偶尔会发送负数（尽管取正后就是正确的亮灯数），他希望通过你的程序来修正它，机智的少年少女们全靠你们了！

$\mathrm Input$
> 多样例文件流输入，每个样例包含一个整数 $a(-2^{31}<a<2^{31})$

$\mathrm Output$
> 文件流输出，每个样例需要输出该样例的绝对值。（请好好编写**转换**程序而不是单纯的绝对值方法）

$\mathrm Sample\ Input$
> 4884
> 4
> -20

$\mathrm Sample\ output$
> 4884
> 4
> 20

$\mathrm Hint$
> 输入输出框架存在于 *test_case.cpp* 中，**使用**已有的 $SendByte(char)$方法作为单字符输出方法，自行编写转换方法$SendInt(\ type\ para\ )$。
希望在编写程序的时候，代码规范（**命名方式**、**缩进**），逻辑清晰（并不是说**无用**的注释一堆）。
上交前先参照测试程序的说明文档自行测试，**完全通过后**再将**test_case.cpp**发送到 **jiangyihen@bit.edu.cn** 或 **lumist.lnx@gmail.com**邮箱，注清**姓名/专业**。
语言建议使用 C/C++，最好的情况是输出结果对且把转换方法封装好，移植到嵌入式平台后更换 $SendByte(char)$ 后直接调用转换方法仍能使用。

$\mathrm Author$
> Ningke




